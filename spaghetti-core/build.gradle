configurations {
	antlr
}

dependencies {
	compile project(":spaghetti-api")
	compile "com.google.javascript:closure-compiler:v20140814"

	compile "org.antlr:antlr4-runtime:4.2"
	compile "commons-lang:commons-lang:2.6"
	compile "commons-codec:commons-codec:1.9"
	compile "commons-io:commons-io:2.4"
	compile "com.google.guava:guava:17.0"
	compile "com.google.code.gson:gson:2.2.4"
	compile "org.slf4j:slf4j-api:1.7.7"
	antlr "org.antlr:antlr4:4.2"
	testCompile "org.slf4j:slf4j-simple:1.7.7"
}

def generatedGrammar = file("${buildDir}/antlr-generated")
task generateGrammar(type: JavaExec) {
	def grammarFile = file("src/main/antlr/Module.g4")
	inputs.file grammarFile
	outputs.dir generatedGrammar
	main = "org.antlr.v4.Tool"
	args = [
			"-o", "${generatedGrammar}/com/prezi/spaghetti/internal/grammar",
			"-package", "com.prezi.spaghetti.internal.grammar",
			"-no-listener",
			"-visitor",
			grammarFile
	]
	classpath = configurations.antlr
}

processResources {
	inputs.property "version", version
	filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
			version: version
	])
}

idea.module {
	sourceDirs += generatedGrammar
	excludeDirs -= project.buildDir
	if (project.buildDir.exists()) {
		project.buildDir.eachDir {
			if (it != generatedGrammar) {
				excludeDirs += it
			}
		}
	}
}

sourceSets {
    main {
        java {
            srcDir generatedGrammar
        }
    }
}

compileJava {
	dependsOn generateGrammar
}

task testJar(type: Jar) {
	from sourceSets.test.output
	classifier = "tests"
}

task run(type: Exec) {
	workingDir "src/test/at"
	commandLine = ["gradle", "clean", "packApplication", "-is"]
}

artifacts {
	testCompile(testJar)
	archives(testJar)
}
