def siteDirectory = file("${buildDir}/site")
def shouldPublish = parent.hasProperty("release") && parent.hasProperty("sonatype")

task cloneSite(type: Exec) {
	outputs.dir siteDirectory
	commandLine "git", "clone", "--branch", "gh-pages", "--depth", "1", "git@github.com:prezi/spaghetti", siteDirectory
	doFirst {
		delete siteDirectory
		mkdir siteDirectory
	}
}

task aggregateJavadoc(type: Javadoc) {
	dependsOn cloneSite

	destinationDir file("${siteDirectory}/javadoc")

	options.docTitle = "Spaghetti ${version} API"
	options.windowTitle = "Spaghetti ${version} API"

	parent.javaProjects.each { subproject ->
		source += [subproject.sourceSets.main.allJava]
		classpath += [subproject.sourceSets.main.compileClasspath]
	}

	doFirst {
		// Make sure we don't leave stale HTMLs behind
		delete destinationDir
	}
}

task buildSite {
	dependsOn aggregateJavadoc
}

task addSite(type: Exec) {
	dependsOn buildSite
	onlyIf { shouldPublish }
	commandLine "git", "add", "--all"
	workingDir siteDirectory
}

task commitSite(type: Exec) {
	dependsOn addSite
	onlyIf { shouldPublish }
	commandLine "git", "commit", "--message", "Updated site for ${version} release"
	workingDir siteDirectory
}

task publishSite(type: Exec) {
	dependsOn commitSite
	onlyIf { shouldPublish }
	commandLine "git", "push"
	workingDir siteDirectory
}

task check {}

tasks.withType(Upload) {
	if (shouldPublish) {
		dependsOn publishSite
	}
}
