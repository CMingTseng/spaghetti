package com.prezi.gradle.spaghetti.haxe

import com.prezi.gradle.spaghetti.ModuleConfiguration
import com.prezi.gradle.spaghetti.ModuleDefinition
import org.antlr.v4.runtime.Token
import prezi.spaghetti.SpaghettiModuleBaseVisitor

/**
 * Created by lptr on 16/11/13.
 */
abstract class HaxeGeneratorVisitor<T> extends SpaghettiModuleBaseVisitor<Object> {
	static def HAXE_TYPE_NAME_CONVERSION = [
			(ModuleConfiguration.TYPE_VOID): "Void",
			(ModuleConfiguration.TYPE_BOOL): "Bool",
			(ModuleConfiguration.TYPE_INT): "Int",
			(ModuleConfiguration.TYPE_FLOAT): "Float",
			(ModuleConfiguration.TYPE_STRING): "String"
	]

	protected final ModuleConfiguration config
	protected final ModuleDefinition module
	protected final File outputDirectory

	protected File currentFile

	protected HaxeGeneratorVisitor(ModuleConfiguration config, ModuleDefinition module, File outputDirectory)
	{
		this.config = config
		this.module = module
		this.outputDirectory = module.name.createNamespacePath(outputDirectory)
		this.outputDirectory.mkdirs()
	}

	protected File createHaxeSourceFile(String name)
	{
		def file = new File(outputDirectory, name + ".hx")
		file.delete()
		file << "/*\n"
		file << " * Generated by Spaghetti.\n"
		file << " */\n"
		if (module.name.hasNamespace())
		{
			file << "package ${module.name.namespace};\n"
			file << "\n"
		}
		return file
	}

	protected String haxeTypeName(String typeName)
	{
		def fqName = config.resolveTypeName(typeName, module.name)
		return HAXE_TYPE_NAME_CONVERSION.get(fqName) ?: fqName.fullyQualifiedName
	}

	protected void addDocumentationIfNecessary(Token doc)
	{
		def documentation = doc?.text
		if (documentation != null)
		{
			currentFile << documentation
		}
	}
}
