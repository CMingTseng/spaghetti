ext.gradleVer = "2.3"
ext.groovyVersion = "2.3.9"

String gitVersion
if (hasProperty("release")) {
	gitVersion = [ "git", "describe", "--match", "[0-9]*", "--dirty"].execute().text.trim()
} else {
	gitVersion = [ "git", "describe", "--match", "[0-9]*", "--abbrev=0"].execute().text.trim() + "-SNAPSHOT"
}

task version << {
	println "Version: ${gitVersion}"
}

def sonatype = hasProperty("sonatype")
def signArtifacts = sonatype || hasProperty("sign")

allprojects {
	group = 'com.prezi.spaghetti'
	description = "Spaghetti"
	version = gitVersion
	apply plugin: 'idea'
	apply plugin: 'eclipse'

	tasks.withType(Upload).all { dependsOn "check" }
	tasks.withType(org.gradle.api.tasks.compile.JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked"
	}
}

subprojects { subproject ->
	apply plugin: 'maven'
	// For some reason this is needed ot have dependencies in POM files
	apply plugin: "java"

	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "https://oss.sonatype.org/content/groups/public"
		}
		maven {
			url "http://gradle.artifactoryonline.com/gradle/libs"
		}
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				pom.project {
					url "http://github.com/prezi/spaghetti/"
					name subproject.name
					description subproject.description

					scm {
						url "http://github.com:prezi/spaghetti"
						connection "scm:git@github.com:prezi/spaghetti.git"
						developerConnection "scm:git@github.com:prezi/spaghetti.git"
					}

					licenses {
						license {
							name "The Apache Software License, Version 2.0"
							url "http://www.apache.org/licenses/LICENSE-2.0.txt"
							distribution "repo"
						}
					}

					developers {
						developer {
							id "lptr"
							name "Lorant Pinter"
						}
						developer {
							id "exFalso"
							name "Andras Slemmer"
						}
						developer {
							id "gidapataki"
							name "Gida Pataki"
						}
					}
				}

				if (sonatype) {
					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						def user = project.getProperty("sonatypeUsername")
						def password = project.getProperty("sonatypePassword")
						authentication(userName: user, password: password)
					}
					snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
						def user = project.getProperty("sonatypeUsername")
						def password = project.getProperty("sonatypePassword")
						authentication(userName: user, password: password)
					}
				} else if (project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")) {
					def user = project.getProperty("nexusUser")
					def password = project.getProperty("nexusPassword")
					repository(url: "https://artifactory.prezi.com/plugins-release-local/") {
						authentication(userName: user, password: password)
					}
					snapshotRepository(url: "https://artifactory.prezi.com/plugins-snapshot-local/") {
						authentication(userName: user, password: password)
					}
				}
			}
		}
	}

	if (signArtifacts) {
		apply plugin: "signing"

		signing {
			sign configurations.archives
		}

		uploadArchives {
			repositories {
				mavenDeployer {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				}
			}
		}
	}
}

ext.codeProjects = subprojects - project(":spaghetti-docs")
ext.groovyProjects = [
		project(":spaghetti-support-test-harness"),
		project(":spaghetti-haxe-support"),
		project(":spaghetti-typescript-support")
]
ext.javaProjects = codeProjects - groovyProjects


configure(codeProjects) {
	apply plugin: 'groovy'

	sourceCompatibility = "1.6"
	targetCompatibility = "1.6"

	sourceSets {
		integTest {
			java.srcDir file('src/integTest/java')
			groovy.srcDir file('src/integTest/groovy')
			resources.srcDir file('src/integTest/resources')
		}
	}

	dependencies {
		integTestCompile sourceSets.main.output
		integTestCompile configurations.testCompile
		integTestCompile sourceSets.test.output
		integTestRuntime configurations.testRuntime
	}

	task integTest(type: Test) {
		shouldRunAfter test
		testClassesDir = sourceSets.integTest.output.classesDir
		classpath = sourceSets.integTest.runtimeClasspath
	}

	check.dependsOn integTest

	tasks.withType(AbstractCompile) {
		options.encoding = "UTF-8"
	}

	project.dependencies {
		testCompile "junit:junit:4.11"
		testCompile "org.mockito:mockito-all:1.9.5"
		testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
			exclude group: "org.codehaus.groovy"
		}
		testCompile "org.codehaus.groovy:groovy:${groovyVersion}"
	}

	test {
		testLogging.showStandardStreams = true
	}

	task sourcesJar(type: Jar) {
		from sourceSets.main.allSource
		classifier = "sources"
	}

	jar {
		from rootProject.file("LICENSE.txt")
	}

	def doc
	if (project.name == "spaghetti-support-test-harness"
			|| project.name ==~ /spaghetti-(haxe|typescript)-support/) {
		doc = groovydoc
	} else {
		doc = javadoc
	}

	task docJar(type: Jar) {
		dependsOn doc
		classifier = "javadoc"
		from doc.destinationDir
	}

	artifacts {
		archives jar
		archives docJar
		archives sourcesJar
	}

	configurations {
		groovydoc { extendsFrom compile }
	}

	dependencies {
		groovydoc "org.codehaus.groovy:groovy-all:${groovyVersion}"
	}

	String[] apis = [
		"https://docs.oracle.com/javase/8/docs/api/",
		"http://www.groovy-lang.org/gapi/",
		"https://gradle.org/docs/${gradleVer}/javadoc",
		// "http://prezi.github.io/gradle-haxe-plugin/javadoc/",
		// "http://prezi.github.io/gradle-typescript-plugin/javadoc/",
	]

	def excludes = [
		"**/internal/*",
	]

	tasks.withType(Javadoc) {
		options.encoding = "UTF-8"
		options.links apis
		options.noTimestamp = true
		exclude excludes
	}

	tasks.withType(Groovydoc) {
		groovydoc.groovyClasspath = configurations.groovydoc
		// Done in doFirst() so that we don't download stuff in configuration phase
		doFirst {
			apis.each {
				//link(it, *(new URL("$it/package-list").text.tokenize("\n")))
			}
		}
		exclude "**/internal/**"
		exclude excludes
	}
}

def inheritJavadoc(Project target, Project dependency) {
	def coreJavadoc = dependency.tasks.javadoc
	def javadocUrl = "http://prezi.github.io/spaghetti/javadoc/"

	target.javadoc {
		dependsOn coreJavadoc
		options.linksOffline javadocUrl, coreJavadoc.destinationDir.path
	}

	target.groovydoc {
		dependsOn coreJavadoc
		doFirst {
			link(javadocUrl, *(new File(coreJavadoc.destinationDir, "package-list").text.tokenize("\n")))
		}
	}
}

// Make Javadocs depend on core
configure(codeProjects - project(":spaghetti-core") - project(":spaghetti-api")) { p ->
	inheritJavadoc p, project(":spaghetti-core")
}

configure(project(":spaghetti-core")) { p ->
	inheritJavadoc p, project(":spaghetti-api")
}

configure(subprojects.findAll { it.name ==~ /gradle-spaghetti-.*-plugin/}) { p ->
	inheritJavadoc p, project(":gradle-spaghetti-plugin")
}

configure(groovyProjects) {
	dependencies {
		compile "org.codehaus.groovy:groovy:${groovyVersion}"
	}
}

configure(subprojects.findAll { it.name ==~ /spaghetti-.*-support/ }) {
	dependencies {
		compile project(path: ":spaghetti-api")
		testCompile project(path: ":spaghetti-support-test-harness")
	}

	task zipIntegrationTestSources(type: Zip) {
		from "src/integTest/module/src"
		archiveName "integration-test-sources.zip"
	}

	processTestResources {
		from zipIntegrationTestSources
	}
}

configure(subprojects.findAll { it.name ==~ /gradle-spaghetti-.*-plugin/}) {
	dependencies {
		compile gradleApi()
		compile project(path: ":gradle-spaghetti-plugin")
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleVer
}
