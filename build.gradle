def gitVersion = [ "git", "describe", "--match", "[0-9]*", "--dirty"].execute().text.trim()

task version {
	doLast {
		println "Version: ${gitVersion}"
	}
}

allprojects {
	group = 'com.prezi.spaghetti'
	version = gitVersion
	apply plugin: 'idea'
}

subprojects { subproject ->
	apply plugin: 'groovy'
	apply plugin: 'maven'

	sourceCompatibility = "1.6"
	targetCompatibility = "1.6"

	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "http://gradle.artifactoryonline.com/gradle/libs"
		}
	}

	dependencies {
		testCompile "junit:junit:4.11"
		testCompile "org.mockito:mockito-all:1.9.5"
		testCompile("org.spockframework:spock-core:0.7-groovy-1.8") {
			exclude group: "org.codehaus.groovy"
		}
	}

	uploadArchives {
		repositories {
			repositories {
				mavenDeployer {
					pom.project {
						url "http://github.com/prezi/spaghetti/"
						name subproject.name
						description subproject.description

						scm {
							url "scm:git@github.com:prezi/spaghetti.git"
							connection "scm:git@github.com:prezi/spaghetti.git"
							developerConnection "scm:git@github.com:prezi/spaghetti.git"
						}

						licenses {
							license {
								name "The Apache Software License, Version 2.0"
								url "http://www.apache.org/licenses/LICENSE-2.0.txt"
								distribution "repo"
							}
						}

						developers {
							developer {
								id "lptr"
								name "Lorant Pinter"
							}
							developer {
								id "exFalso"
								name "Andras Slemmer"
							}
							developer {
								id "gidapataki"
								name "Gida Pataki"
							}
						}
					}

					if (project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")) {
						def user = project.getProperty("nexusUser")
						def password = project.getProperty("nexusPassword")
						repository(url: "https://artifactory.prezi.com/plugins-release-local/") {
							authentication(userName: user, password: password)
						}
						snapshotRepository(url: "https://artifactory.prezi.com/plugins-snapshot-local/") {
							authentication(userName: user, password: password)
						}
					}
				}
			}
		}
	}

	task groovydocJar(type: Jar, dependsOn: groovydoc) {
		classifier = "javadoc"
		from "build/docs/groovydoc"
	}

	task sourcesJar(type: Jar) {
		from sourceSets.main.allSource
		classifier = "sources"
	}

	artifacts {
		archives jar
		archives groovydocJar
		archives sourcesJar
	}
}

configure(subprojects.findAll { it.name ==~ /spaghetti-.*-support/ }) {
	dependencies {
		compile project(path: ":spaghetti-core")
	}
}

project(":gradle-spaghetti-plugin") {
	dependencies {
		compile gradleApi()
		compile "com.google.javascript:closure-compiler:v20131014"
		compile project(path: ":spaghetti-core")
		// Add all support projects
		rootProject.subprojects.findAll { it.name ==~ /spaghetti-.*-support/ }.each { supportProject ->
			compile project(path: supportProject.path)
		}
	}

	task run(type: Exec) {
		workingDir "src/test/at"
		commandLine = ["gradle", "clean", "packApplication", "-is"]
	}
}
