/**
 * Layout module.
 */
module prezi.graphics.text as Layout {

	import prezi.graphics.core.JsEnum;

	/**
	 * Different types of character styles.
	 */
	@deprecated("dont use lol")
	enum CharacterStyleType {
		/**
		 * This takes an int.
		 */
		@deprecated("such bad")
		COLOR,

		/**
		 * A string with the name of the font family.
		 */
		FONT_FAMILY,

		/**
		 * This one can be "italic" or "normal".
		 */
		FONT_STYLE,

		/**
		 * Something like "condensed", or our favorite: "normal".
		 */
		FONT_STRETCH,

		/**
		 * The ever so famous "bold" (or "normal").
		 */
		FONT_WEIGHT,

		/**
		 * This'll be a bool.
		 */
		UNDERLINE,

		/**
		 * Again, a bool saying whether or not the text is an URL.
		 */
		URL
	}

	@deprecated
	@annotated(name="meta", param=true)
	struct CharacterStyle {
		/**
		 * The type of the style.
		 */
		@deprecated
		type: CharacterStyleType;
		/**
		 * The value of the style.
		 */
		@mutable value: any;
	}

	struct Generic<T> {
		element: T;
	}

	@deprecated
	interface AbstractText {
		@deprecated("use \"insertNextGen\" instead")
		insert(offset: int, text: string, @nullable withStyles: CharacterStyle[]): void;
		delete(offset: int, end: int): void;
	}

	/**
	 * Describes a block of text.
	 */
	interface Text extends AbstractText {
		/**
		 * Inserts the given string at <code>offset</code>.
		 */
		@deprecated
		getRawText(): string;
	}

	extern interface HTMLCanvasElement;

	/**
	 * Stuff here only to test code generation features.
	 */
	interface TestStuff<Pre, Post> {
		registerCallback(callback: (string) -> void): void;
		doVoidCallback(callback: () -> int): int;
		doAsync(callback: (string, (int) -> string) -> void, converter: (int) -> string): int;
		doSomething(pre: Pre, text: string, post: Post): string;
		drawSomething(canvas: HTMLCanvasElement): void;
	}

	interface Dummy {
		getValue(): int;
	}

	interface TestStuff2<T> extends TestStuff<T, T>, Dummy {
		readValue<X>(object: T, name: string, defaultValue: X): X;
	}

	/**
	 * Some constants.
	 */
	@deprecated
	const Values {
		/**
		 * To say hello.
		 */
		HELLO: int = 12;

		/**
		 * To say Hi.
		 */
		@deprecated
		HI: string = "Hello";
	}

	createText(text?: string): Text;
	createTestStuff(): TestStuff<string, string>;
	getResource(): string;
	createTestStuffWithStringKey<T>(): TestStuff<T, string>;
	getEnumValue(value: JsEnum): string;
}
