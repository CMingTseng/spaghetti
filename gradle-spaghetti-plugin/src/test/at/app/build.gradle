import com.prezi.spaghetti.gradle.BundleApplication
import com.prezi.spaghetti.gradle.ExtractModules
import com.prezi.spaghetti.gradle.GenerateHeaders
import com.prezi.spaghetti.gradle.ObfuscateBundle

evaluationDependsOn(':text-renderer')

apply plugin: "haxe"

configurations {
	requirejs
	main { extendsFrom modules }
}

dependencies {
	modules project(path: ":text-renderer", configuration: "modules")
	modulesObf project(path: ":text-renderer", configuration: "modulesObf")
	requirejs "org.webjars:requirejs:2.1.8"

	test group: "haxelib3", name: "mconsole", version: "1.4.0"
	test group: "haxelib3", name: "mcover", version: "2.0.3"
	test group: "haxelib3", name: "mlib", version: "2.0.2"
	test group: "haxelib3", name: "munit", version: "2.0.2"
	test group: "haxelib3", name: "hamcrest", version: "1.2.1"
	test group: "haxelib3", name: "tink_core", version: "1.0.0-alpha"
	test group: "haxelib3", name: "tink_macro", version: "0.0.0-alpha"
	test group: "haxelib3", name: "mockatoo", version: "2.1.0"
}

spaghetti {
	platform "haxe"
}

haxe {
	main "prezi.test.client.Client"
	targetPlatforms {
		js
	}
}

sources {
	main {
		haxe {
			source.srcDir generateHeaders.outputDirectory
			builtBy generateHeaders
		}
	}
}

task bundleApplication(type: BundleApplication) {
	dependsOn compileJs
	inputFile compileJs.outputFile
}

task obfuscate(type: ObfuscateBundle) {
	dependsOn bundleApplication
	inputFile bundleApplication.outputFile
}

def testWebappDir = file("${buildDir}/webapp")

task unzipRequireJS << {
	testWebappDir.mkdirs()
	configurations.requirejs.files.each { zipFile ->
		zipTree(zipFile).each { file ->
			if (file.name == "require.js") {
				def output = new File(testWebappDir, "require.js")
				output << file.text
			}
		}
	}
}

task packApplication(type: ExtractModules) {
	dependsOn bundleApplication
	dependsOn unzipRequireJS

	outputDirectory testWebappDir

	doLast {
		copy {
			from bundleApplication.outputFile
			into testWebappDir
		}
		copy {
			from "src/test/webapp"
			into testWebappDir
		}
	}
}
